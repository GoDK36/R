.a <- 3
b3 <- 2
total <- .a + b3
print(total * 2)
.a <- 3
b3 <- 2
total <- .a + b3
print(total * 2)
load("C:/God/Programming/R/.RData")
grade <- 'B'
print(grade)
print(grade)
print(grade)
print(grade)
num <- '13'
print(num)
class(num)
class(num)
class(numb)
class(numb)
class(num)
class(num)
grade <- 'B'
print(grade)
numb<-13
num <- '13'
print(num)
class(num)
grade <- 'B'
print(grade)
numb<-13
num <- '13'
print(num)
class(num)
res <- TRUE
class(res)
class(reso)
reso <- F
class(reso)
numb<-13
num <- '13'
print(num)
class(num)
class(numb)
res <- TRUE
class(res)
reso <- F
class(reso)
kor <- 95
kor >= 90
above90 <- kor >= 90
below90 <- kor < 90
print(above90)
print(below90)
Sys.Date()
today1 <- Sys.Date()
today2 <- Sys.time()
class(today1)
class(today2)
print(today1, today2)
print(today1, today2)
class(today2)
9^4
2**4
3^4
7%2
7%%2
10%/%3
num1 <- 10
num2 <- 20
num1 == 10 & 10
num1 == 10 & 7
num1 == 10 & num2 < 30
num1 == 10 & num2 > 50
num1 == 9 & num2 < 30
num1 == 8 & num2 >50
num1 == 10 | num2 < 30
num1 == 10 | num2 > 50
num1== 9 | num2 < 30
num1 == 9 | num2 > 50
!(num2<30)
!(num1 == 9)
a <- 70
b <- 120
a >= 100 & b < 100
a <= 100 | b < 100
a <= 80 & a >= 60 & b <= 90 & b>= 80
a <= 80 & a >= 60 & b <= 120 & b>= 80
a <= 80 & a >= 60 & b <= 90 & b>= 80
a < 80 & a > 60 & b < 90 & b > 80
source('C:/God/Programming/R/practice2.R', echo=TRUE)
source('C:/God/Programming/R/practice2.R', echo=TRUE)
a < 80 & a > 60 & b < 90 & b > 80
(a < 80 & a > 60) | (b < 90 & b > 80)
a < 80 & a > 60 | b < 90 & b > 80
TRUE & TRUE | FALSE & TRUE
TRUE | TRUE & FALSE
TRUE & FALSE
source('C:/God/Programming/R/practice2.R', encoding = 'UTF-8', echo=TRUE)
k = 200
c = k - 273
f = 1.8 * c + 32
print(f)
k <- 200
c <- k - 273
f <- 1.8 * c + 32
print(f)
source('C:/God/Programming/R/practice2.R', encoding = 'UTF-8', echo=TRUE)
the <- (30,20,15)
the <- c(30,20,15)
print(the)
of <- c(25,15,10)
print(of)
theOf <- c('the','of')
print(theOf)
sum(the)
thek <- c(30,'20',15)
print(thek)
print(thek) #숫자형과 문자형이 혼재되있으면 전체를 다 문자형으로 바꾼다다
print(thek) #숫자형과 문자형이 혼재되있으면 전체를 다 문자형으로 바꾼다다다
print(c)
print(ofk)
ofk <- c(25,T,FALSE)
print(ofk)
x <- 1:5
print(x)
y <- 10:5
print(y)
z = seq(from=1, to=20, by=2)
#1부터 20까지 2씩 증가하는 수열 벡터
#매개변수인 from,to 생략 가능
print(z)
seq(1,5,0.5)
seq(1,7,length.out = 4)
score <- c(80,60,90,70)
score[2:4]
score[c(1,2,4)]
score[-3]
score[-c(1,2,4)]
score[2:4 #2~4번째 원소 접근]
score[-3]#3번째 원소를 제외한 나머지
score[2:4] #2~4번째 원소 접근
score[c(1,2,4)] #1,2,4번째 원소 접근
score[-3]#3번째 원소를 제외한 나머지
score[-c(1,2,4)] # 1,2,4번째 원소 제외한 나머지
# -표시가 그 해당되는 번째의 원소를 제외한다는 뜻
res <- score[1] + score[3]
print(res)
score <- 65
source('C:/God/Programming/R/practice3.R', encoding = 'UTF-8', echo=TRUE)
score[2] <- 65
#기존의 벡터 값 수정
score[2:4] <- 10
#해당되는 위치의 값이 10으로 바뀜뀜
scroe [2:4] <- c(20,30,40)
#해당되는 위치의 값이 10으로 바뀜뀜
score [2:4] <- c(20,30,40)
print(score)
#같은 벡터 값으로 넣어주면 바뀜
score[c(1,2,4)] <- c(20,30,40)
#해당되는 값만 바뀜
score[-2] <- 100
source('C:/God/Programming/R/practice3.R', encoding = 'UTF-8', echo=TRUE)
a1 <- c(2,3,4,5)
a2 <- c(4,5,6,7)
a3 <- c(7,8,9)
a4 <- c(2,3)
a1 + a2
#동일한 위치의 원소끼리 계산
a1 + a4
#recycling rule에 따라서 부족한 값을 채워서 계산
#2+2 3+3 4+2 5+3
a1 +10
score <- c(80,60,90,70)
score1 <- c(80,60,90,70)
sume(score1)
sum(score1)
max(score1)
min(score1)
mean(score1)
q1 = sum(seq(1,100,1))
print(q1)
q2 = seq(0,100,2)
print(q2)
q3 <- seq(55,100,1)
print(q3[23])
q4 <- seq(33,103,1)
print(q4[-c(3,17,29)])
q5 <- q1[1:9]
q5 <- q1[1:9] + 300
print(q5)
q5 <- q1[1:9]
print(q5)
q5 <- a[1:9] + 300
a <- seq(1,100,1)
q5 <- a[1:9] + 300
print(q5)
a[1:9] <- a[1:9] + 300
print(a)
sum(seq(1,100))
sum(seq(1,100))
seq(2,100,2)
num <- 55:100
num[23]
num2 <- 33:103
num2[-c(3, 17, 29)]
num3 <- 1:100
num4 <- num3[1:9]+300 # 301~309
num3[c(1:9)] <- num4
num3
q1 = sum(seq(1,100))
print(q1)
q2 = seq(0,100,2)
print(q2)
q2 = seq(2,100,2)
print(q2)
q3 <- seq(55,100,1)
print(q3[23])
q4 <- seq(33,103,1)
print(q4[-c(3,17,29)])
a <- seq(1,100,1)
a <- seq(1,100)
a[1:9] <- a[1:9] + 300
print(a)
source('C:/God/Programming/R/practice3.R', encoding = 'UTF-8', echo=TRUE)
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8', echo=TRUE)
x<- c(10,-20,4,20)
x > 0
lv2 <- x > 0
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8', echo=TRUE)
print(x[x>0])
print(x[x<0])
#cat() 함수
#print와 달리 줄바꿈이 되지 않음
#sep를 사용해 separator를 지정
cat(1,'더하기',2,'는',3,'입니다')
cat(1,'더하기',2,'는',3,'입니다',sep='')
cat(1,'더하기',2,'는',3,'입니다\n')
cat(1,'더하기',2,'는',3,'입니다',\n)
cat(1,'더하기',2,'는',3,'입니다','\n')
cat(1,'더하기',2,'는',3,'입니다\n')
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8', echo=TRUE)
cat(1,'더하기',2,'는',3,'입니다')
cat('하지만',3)
cat(1,'더하기',2,'는',3,'입니다')
cat('하지만',3)
print(1)
print(2)
cat(1,'더하기',2,'는',3,'입니다','\n')
cat('but',45)
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8', echo=TRUE)
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8')
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8')
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8')
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8')
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8')
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8')
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8')
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8')
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8')
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8')
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8', echo=TRUE)
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8')
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8')
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8')
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8')
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8')
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8')
matrix(data, nrow=4)
data <- 1:8
matrix(data, nrow=4)
matrix(data, nrow=4,byrow=T)
matrix(data,ncol=4)
matrix(data, ncol=3)
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8')
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8')
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8')
data4 <- c(12,50,2)
print(data4)
data4 <- seq(12,50,2)
print(data4)
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8')
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8', echo=TRUE)
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8', echo=TRUE)
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8')
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8', echo=TRUE)
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8', echo=TRUE)
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8', echo=TRUE)
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8', echo=TRUE)
matrix(data, ncol=3) #자료값 개수가 안맞으면 생성안됨
matrix(data, nrow=4,ncol=4)
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8', echo=TRUE)
matrix(data, ncol=3) #자료값 개수가 표현되어야할 개수보다 많으면 생성안됨
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8', echo=TRUE)
matrix(data,ncol=4)
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8', echo=TRUE)
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8', echo=TRUE)
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8', echo=TRUE)
score <- matrix(c(100,40,85,77,98,84),2)
colnames(score) <- c('국어', '영어','수학')
rownames(score) <- c('김신우', '이성현')
print(score)
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8')
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8', echo=TRUE)
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8', echo=TRUE)
print(score)
score <- matrix(c(100,40,85,77,98,84),2,T)
colnames(score) <- c('국어', '영어','수학')
rownames(score) <- c('김신우', '이성현')
print(score)
score <- matrix(c(100,40,85,77,98,84),2,3,T)
colnames(score) <- c('국어', '영어','수학')
rownames(score) <- c('김신우', '이성현')
print(score)
score <- matrix(c(100,40,85,77,98,84),2)
colnames(score) <- c('국어', '영어','수학')
rownames(score) <- c('김신우', '이성현')
print(score)
the <- c(30,20,15)
of <- c(25,15,10)
and <- c(15,10,5)
cbind(the,of,and)
cbind(the,of,and,to=c(10,12,14))
rrbind(the,of,and)
rbind(the,of,and)
rbind(the,of,anf,to=c(10,20,45))
rbind(the,of,and,to=c(10,20,45))
scr <- c('A',"B",'A+','B',"B",'C','C','B','A')
res <- matrix(scr,nrow=3,ncol=3,byrow=T)
colnames('stu1','stu2','stu3')
rownames('sci','math','eng')
scr <- c('A',"B",'A+','B',"B",'C','C','B','A')
res <- matrix(scr,3,3,T)
colnames('stu1','stu2','stu3')
rownames('sci','math','eng')
print(res)
colnames(res)<-c('stu1','stu2','stu3')
rownames(res) <-c('sci','math','eng')
print(res)
res2<-cbind(stu1,stu2,stu3)
rownames(res2)<-c('sci','math','eng')
stu1 <- c('A',"B",'C')
stu2<- c('B',"B",'B')
su3<-c("A+",'C','A')
res2<-cbind(stu1,stu2,stu3)
stu3<-c("A+",'C','A')
res2<-cbind(stu1,stu2,stu3)
rownames(res2)<-c('sci','math','eng')
print(res2)
sci<- c('A',"B","A+")
math <- c("B",'B','C')
eng<- c('C','B','A')
res3<- rbind(sci,math,eng)
colnames(res3) <- <-c('stu1','stu2','stu3')
colnames(res3) <-c('stu1','stu2','stu3')
print(res3)
source('C:/God/Programming/R/practice4.R', encoding = 'UTF-8')
install.packages("openxlsx")
install.packages("openxlsx")
getwd() #현재 내 작업 디렉토리
setwd('E:/Programming/R/강의자료')
setwd('F:/Programming/R/강의자료')
install.packages("openxlsx")
library(openxlsx)
#엑셀 불러오기
df <- read.xlsx("attBook.xlsx")
#학년 평균
mean(df$학년)
#15학번 학생 정보
sn <- substr(df$학번,3,4)
df[sn=="15",c('성명',학번)]
df[sn=="15",c('성명','학번')]
#성이 '김'인 학생 정보
df[substr(df$성명,1,1)=='김',]
#학번이 가장 높은 학생의 정보
sort(df$학번,decreasing=T)[1] #가장 높은 학번만 가져옴
df[order(-df$학번)[1:5],]
#학과별 벡터
table(df$학과)
#그래프 생성
barplot(table(df$학과))
barplot(talbe(sn))
barplot(table(sn))
#중앙값 구하기
median(as.numeric(sn))
#학번 평균 구하기
avg <- mean(as.numeric(sn))
#새로운 고학번이라는 열 만들기
df$구분[as.numeric(sn)<avg] <- '고학번'
df$구분[as.numeric(sn)>avg] <- '저학번'
lv <- readLines('debate.txt')
#발화 분리하기
trump <- grep('^Trump:',lv,value=T)
clinton <- grep('^Clinton:',lv,value=T)
#발화 전처리
trump <- gsub("^Trump:",'',trump)
clinton <- gsub("^Clinton:",'',clinton)
#단어 벡터화 하기
t_wrd<- unlist(strsplit(trump,"\\s+"))
c_wrd<- unlist(strsplit(clinton,"\\s+"))
#불필요한 기호제거
t_wrd <- gsub("[[:punct:]]",'',t_wrd)
c_wrd <- gsub('[[:punct:]]','',c_wrd)
#소문자 전환
t_wrd <- tolower(t_wrd)
c_wrd <- tolower(c_wrd)
#빈도수 산출
t_freq <- sort(table(t_wrd), decreasing = T)
s_freq <- sort(table(c_wrd), decreasing = T)
#데이터프레임화
df_t <- as.data.frame(t_freq)
df_c <- as.data.frame(s_freq)
colnames(df_t) <- c('단어','빈도')
colnames(df_c) <- c('단어','빈도')
df_t
df_c
write.xlsx(df_t,'trp.xlsx')
write.xlsx(df_c,'cli.xlsx')
