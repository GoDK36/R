################
####Exercise####
################

name <- readline("Enter your name: ")
age <- as.numeric(readline("Enter your age: "))
if (age < 18) {
  cat(name, "you can't vote.")
}else {
  cat(name, "you can vote.")
}

scr <- readline("What is your score?")
if (as.numeric(scr) >= 60){
  print("pass")
} else {
  print("fail")
}

num <- as.numeric(readline("Enter number: "))
if (num / 2 == 0) {
  cat(num, "is even number.")
} else {
  cat(num,"is odd number.")
}

grdscr <- as.numeric(readline("Enter your score: "))
if (grdscr >= 90){
  print("A")
}else{
  if(grdscr >= 80){ #굳이 90점 미만 적을 필요 엑스
    print("B")
  }else{
    print("C")
  }
}

################
#파이썬의 elif가 R에서는 else if이다
################
####Exercise####
################

inpscr <- as.numeric(readline("성적을 입력하세요: "))
if (inpscr >= 90){
  print("A")
} else if (inpscr >= 80) {
  print("B")
} else {
  print("C")
}

number <- as.numeric(readline("숫자를 입력하세요: "))
if (number > 0){
  print("양수")
} else if (number == 0){
  print(0)
} else {
  print("음수")
}

################
#for (변수 in vector){
# <반복해서 수행할 코드>
# }
tot<-0
for (n in seq(1,10)){
  tot <- tot + n
}
print(tot)

################
####Exercise####
################
total <- 0
for (n in seq(1,10)){
  if (n%%2==0){
    print("짝수")
  }else{
    print("odd")
  }
}

for (n in seq(1,100)){
  if (n%%2==0){
    total <- total + n
  }
}
print(total)

####개수 세기
v<-c('a','b','c')
cnt<-0
for (char in v){
  print(char)
  cnt <- cnt + 1
}
print(cnt)

cnteven<-0
cntodd<-0
for (n in seq(1,55)){
  if (n%%2==0){
    cnteven <- cnteven +1
  }else{
    cntodd<- cntodd +1
  }
}
cat(cnteven,cntodd)

for (n in seq(1,9,2)){
  print(n**2)
}

##################
#while은 for과 다르게 조건값이 true일때 계속 수행됨
x <- 1
while (x<6){
  print(x)
  x <- x+1
}

################
####Exercise####
################

while(x<=9){
  print(x**2)
  x <- x+2
}

################
#repeat()는 해당되는 조건식(if)가 해당되기 전까진 반복.
x <- 1
repeat{
  print(x)
  if(x>10) break
  x <- x+1
}

y<-0
while(y<10){
  y<- y+1
  if (y%%2==0){
    next
  }
  print(y)
}

z<-0
repeat{
  if(z>10) break
  z <- z+1
  if(z%%2==0) next
  print(z)
}

################
####Exercise####
################

while (1){
  nme <- readline("Enter name: ")
  if (nme == 'quit') {
    print("Bye bye")
    break
  }else if (nme == ''){
    print("아무것도 입력하지 않았습니다.")
    next  
    }
  cat(nme,'님, 반갑습니다.\n',sep="")
  # if (nme == 'quit') break 여기에 들어가면 "quit님 반갑습니다"도 출력되고 종료됨.
}

############################
#과제는 1)while문으로 1~100까지 짝수 합 구하기
#       2)while 문으로 1~10까지 각각 홀수와 짝수인지 출력하기
#       3)while 문으로 1~55까지 숫자 중 홀수의 개수 짝수의 개수 구하기

#과제 1
res1 <- 0
x<-1
while (x<=100) {
  if (x%%2==0){
    res1 <- res1 + x
  }
  x <- x+1
}

#과제2
x1 <- 1
while(x1<=10){
  if (x1%%2==0){
    cat(x1,"짝수\n")
  } else {
    cat(x1,"홀수\n")
  }
  x1 <- x1+1
}

#과제3
cnteven<-0
cntodd<-0
x2<-1
while (x2<=55){
  if(x2%%2==0){
    cnteven <- cnteven+1
  } else {
    cntodd <- cntodd+1
  }
  x2 <- x2 +1
}
cat(cnteven,cntodd)

####sprintf()####
sprintf("%d",23) #%d는 digit 숫자를 출력함
sprintf("%s","A") #%s는 string 문자열을 출력
sprintf("%.2f",123.42368) #%.xf는 소수점 x자리까지 반올림하여 나타냄
sprintf("%5d",25) #%xd는 x자리수를 나타냄. 모자랄경우 앞을 빈칸으로채움

################
####Exercise####
################

nme <- c("최지은", "김승규")
age <- c(28,36)
btype <- c("A","B")

df <- data.frame(이름=nme, 나이=age, 혈액형=btype)
df
sprintf("이름은 %s, 나이는 %d, 혈액형은 %s입니다.",df$이름[1],df$나이[1],df$혈액형[1])
sprintf("이름은 %s, 나이는 %d, 혈액형은 %s입니다.",df$이름,df$나이,df$혈액형)

################

v <- 11:15
for (n in 1:length(v)) { #1:length(v) 1부터 벡터 v에 들어있는 원소의 개수만큼
  v[n]
}

lst <- list(2,'a',4)
for (i in 1:length(lst)){
  print(lst[i])
}

#행을 출력하는 방법

for (i in 1:nrow(df)) {
  print(df[i,])
}

#열을 출력하는 방법

for (i in 1:ncol(df)){
  print(df[,i])
}

df2 <- data.frame(a=1:3,b=4:6,c=7:9)

for (i in 1:ncol(df2)){
  print(mean(df2[,i]))
}

################
####Exercise####
################

v <-c(3,5,2,6,5)
for(i in 1:length(v)-1){
  sum <- v[i] + v[i+1]
  print(sprintf("%d + %d = %d",v[i],v[i+1],sum)) #sum에 따로 원소 위치값을 지정할 필요엑스
}

df
for (i in 1:nrow(df)){
  print(sprintf("이름은 %s, 나이는 %d, 혈액형은 %s입니다.",df$이름[i],df$나이[i],df$혈액형[i]))
}

i<-1
while (i <= nrow(df)) {
  print(sprintf("이름은 %s, 나이는 %d, 혈액형은 %s입니다.",df$이름[i],df$나이[i],df$혈액형[i]))
  i <- i + 1
}

################

#중첩 반복문

nums <- c(1,2,3,4)
alphas <- c('a','b','c','d')
for (n in nums){
  print(n)
  for (a in alphas){
    print(a)
  }
}

#################
####Exercise#####
#################

x <- c(1:9)
y <- c(1:9)

for (a in x) {
  # print(sprintf("<%d단>",a))
  cat("\n<",a,"단>\n",sep="")
  # if (a == 2){
  #   n <- ''
  # }else{
  #   n <- '\n'
  # }
  # print(sprintf("%s<%d단>",n,a))
  for (b in y){
    print(sprintf("%d x %d = %d",a,b,a*b))
  }
}


#######################################
#######################################

#사용자 정의 함수 작성법
# 함수명 <-  function(x,y,z,...){
#   함수본문
#   return(반환값)
# }
#함수 안에서 쓰인 인자(매개변수)는 함수 안에서만 적용.

mySum <- function(x,y,z){
  tot <- x + y + z
  return(tot)
}
print(mySum(1,4,6))

myCal <- function(a,b,c){
  tot <- a*b-c
  return(tot)
}
print(myCal(2,3,5))

#return은 생략가능,print로도 대체 가능, 매개변수도 생략가능

################
####Exercise####
################

triSpace <- function(low, height){
  space <- low * height / 2
  return(space)
}

greet<- function(nme) {
  res <- sprintf("%s님, 환영합니다!",nme)
  return(res)
}

print(greet('신우'))

vectorRange <- function(v){
  range <- max(v) - min(v)
  return(range)
}

evenSum <- function(){
  tot <- 0
  for (i in 1:10){
    if (i%%2==0){
      tot <- tot + i
    }
  }
  return(tot)
}

print(evenSum())

evenSum <- function(a,b) {
  tot <- 0
  for (i in a:b){
    if (i%%2==0){
      tot <- tot + i
    }
  }
  return(tot)
}

print(evenSum(30,56))

square <- function(){
  for (n in 1:10){
    print(n**2)
  }
}

print(square())

square <- function(a){
  for (n in 1:a){
    k<- n**2
    print(k)
  }
}

print(square(5))

mySumDiff <- function(a,b,c) {
  if (c == T){
    return(a+b)
  }
  if(c == F){
    return(a-b)
  }
}
mySumDiff(3,6,TRUE)
mySumDiff(6,85,F)
mySumDiff(46,5,5)
